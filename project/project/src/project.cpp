/*
-----------------------------------------------------------------------------
Filename:    project.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "project.h"

//-------------------------------------------------------------------------------------
project::project(void)
{
}
//-------------------------------------------------------------------------------------
project::~project(void)
{
}

//-------------------------------------------------------------------------------------
void project::createScene(void)
{
    // Create the ground with grass on it
 	Ogre::Plane plane;
    plane.normal = Ogre::Vector3::UNIT_Y;
	// horizontal plane with normal up in y-direction
   	plane.d = 0;//Plane passes through the origin i.e. plane at y = 0
    Ogre::MeshManager::getSingleton().createPlane("floor",
		Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, plane,
		1000,1000,10,10,true,1,10,10,Ogre::Vector3::UNIT_Z);
   	Ogre::Entity* pPlaneEnt = mSceneMgr->createEntity("plane", "floor");
    pPlaneEnt->setMaterialName("Examples/GrassFloor");
   	pPlaneEnt->setCastShadows(false);
	Ogre::SceneNode* floorNode = mSceneMgr->createSceneNode("floor1");
	mSceneMgr->getRootSceneNode()->addChild(floorNode);
	floorNode->attachObject(pPlaneEnt);


	
	Ogre::Entity *cube = mSceneMgr->createEntity("cube", "cube.mesh");
	cube->setMaterialName("Examples/RustySteel");
	Ogre::SceneNode *cubeNode = mSceneMgr->createSceneNode("cubeNode");
	mSceneMgr->getRootSceneNode()->addChild(cubeNode);
	cubeNode->attachObject( cube );
	cube->setCastShadows(true);
	float cubeModelLength = 100;
	float cubeLength = 4;
	// Change size of graphics cube to that of cubeLength
	double cubeScale = cubeLength/cubeModelLength;
	cubeNode->scale(cubeScale, cubeScale, cubeScale);
	// Position the cube to sit exactly on the ground
	cubeNode-> setPosition(Ogre::Vector3(0, 500+ cubeLength/2,0));
	vector<Ogre::Vector3> colPoints;
	colPoints.push_back(Ogre::Vector3(-2,-2,-2));
	colPoints.push_back(Ogre::Vector3(2,-2,-2));
	colPoints.push_back(Ogre::Vector3(2,2,-2));
	colPoints.push_back(Ogre::Vector3(2,-2,-2));
	colPoints.push_back(Ogre::Vector3(2,-2,2));
	colPoints.push_back(Ogre::Vector3(2,2,2));
	colPoints.push_back(Ogre::Vector3(-2,2,2));
	colPoints.push_back(Ogre::Vector3(-2,-2,2));
	objects.push_back(new MovingObject(cubeNode,Ogre::Vector3(0,500+ cubeLength/2,0),colPoints,Ogre::Vector3(0,0,0)));

	
	Ogre::Entity *cube2 = mSceneMgr->createEntity("cube2", "cube.mesh");
	cube->setMaterialName("Examples/RustySteel");
	Ogre::SceneNode *cubeNode2 = mSceneMgr->createSceneNode("cubeNode2");
	mSceneMgr->getRootSceneNode()->addChild(cubeNode2);
	cubeNode2->attachObject( cube2 );
	cube2->setCastShadows(true);
	// Change size of graphics cube to that of cubeLength
	cubeNode2->scale(cubeScale, cubeScale, cubeScale);
	// Position the cube to sit exactly on the ground
	cubeNode2-> setPosition(Ogre::Vector3(0, cubeLength/2,0));
	objects.push_back(new BaseObject(cubeNode2,Ogre::Vector3(0,cubeLength/2,0),colPoints));
    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);
	mCamera->setPosition(objects[0]->getNode()->getPosition().x, objects[0]->getNode()->getPosition().y + 50, objects[0]->getNode()->getPosition().z +100);
}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        project app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
